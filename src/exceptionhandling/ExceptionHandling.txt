The Exception Handling in Java is one of the powerful mechanism 
to handle the runtime errors so that the normal flow of the application 
can be maintained.


Suppose there are 10 statements in a Java program and an exception 
occurs at statement 5; the rest of the code will not be executed, 
i.e., statements 6 to 10 will not be executed. However, when we perform 
exception handling, the rest of the statements will be executed. 
That is why we use exception handling in Java.


The java.lang.Throwable class is the root class of Java Exception hierarchy 
inherited by two subclasses: Exception and Error.


There are two types of Exceptions

Checked Exception - Class which directly inherit Throwable class except 
RuntimeException are known as Checked Exception.
Checked exceptions are checked at compile-time
E.x. - IOException, SQLException, ClassNotFoundException.

Unchecked Exception - The classes that inherit the RuntimeException are known 
as unchecked exceptions. 
E.x. - ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException,
Unchecked exceptions are not checked at compile-time, 
but they are checked at runtime.

The "try" keyword is used to specify a block where we should place an 
exception code. It means we can't use try block alone. 
The try block must be followed by either catch or finally.

The "catch" block is used to handle the exception. It must be preceded by try 
block which means we can't use catch block alone. It can be followed by finally 
block later.

The "finally" block is used to execute the necessary code of the program. 
It is executed whether an exception is handled or not.

The "throw" keyword is used to throw an exception.

The "throws" keyword is used to declare exceptions. 
It specifies that there may occur an exception in the method. 
It doesn't throw an exception. It is always used with method signature.



1) A scenario where ArithmeticException occurs

    int a=50/0;//ArithmeticException  
    
2) A scenario where NullPointerException occurs

   String s=null;  
   System.out.println(s.length());//NullPointerException 
   
3) A scenario where ArrayIndexOutOfBoundsException occurs

    int a[]=new int[5];  
    a[10]=50; //ArrayIndexOutOfBoundsException  